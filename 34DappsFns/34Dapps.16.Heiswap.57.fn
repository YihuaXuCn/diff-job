functiondeposit(uint256[2]memorypublicKey)publicpayable
{
uint256receivedEther=floorEtherAndCheck(msg.value);
uint256etherDecimalVal=(msg.value/(1ether/10))%10;
if(etherDecimalVal>1){
uint256refundEtherDecimalVal=(etherDecimalVal-1)*(1ether/10);
relayerAddress.transfer(1ether/10);
msg.sender.transfer(refundEtherDecimalVal);
}
uint256curIndex=ringsNo[receivedEther];
Ringstoragering=rings[receivedEther][curIndex];
if(!AltBn128.onCurve(uint256(publicKey[0]),uint256(publicKey[1]))){
revert("PublicKeynoonCurve");
}
for(uint8i=0;i<ring.dParticipantsNo;i++){
if(ring.publicKeys[i][0]==publicKey[0]&&
ring.publicKeys[i][1]==publicKey[1]){
revert("AddressalreadyincurrentRing");
}
}
if(ring.dParticipantsNo==0){
ring.createdBlockNumber=block.number-1;
}
ring.publicKeys[ring.dParticipantsNo]=publicKey;
ring.dParticipantsNo++;
ring.amountDeposited+=receivedEther;
if(ring.dParticipantsNo>=ringMaxParticipants){
ring.ringHash=createRingHash(receivedEther/(1ether),curIndex);
ringsNo[receivedEther]+=1;
}
emitDeposited(msg.sender,receivedEther,curIndex);
}
