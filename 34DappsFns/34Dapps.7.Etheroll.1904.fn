functionplayerRollDice(uintrollUnder)public
payable
gameIsActive
betIsValid(msg.value,rollUnder)
{
randomQueryID+=1;
stringmemoryqueryString1="[URL]['json(https:
stringmemoryqueryString2=uint2str(randomQueryID);
stringmemoryqueryString3="${[identity]\"}\"}']";
stringmemoryqueryString1_2=queryString1.toSlice().concat(queryString2.toSlice());
stringmemoryqueryString1_2_3=queryString1_2.toSlice().concat(queryString3.toSlice());
bytes32rngId=oraclize_query("nested",queryString1_2_3,gasForOraclize);
playerBetId[rngId]=rngId;
playerNumber[rngId]=rollUnder;
playerBetValue[rngId]=msg.value;
playerAddress[rngId]=msg.sender;
playerProfit[rngId]=((((msg.value*(100-(safeSub(rollUnder,1))))/(safeSub(rollUnder,1))+msg.value))*houseEdge/houseEdgeDivisor)-msg.value;
maxPendingPayouts=safeAdd(maxPendingPayouts,playerProfit[rngId]);
if(maxPendingPayouts>=contractBalance)throw;
LogBet(playerBetId[rngId],playerAddress[rngId],safeAdd(playerBetValue[rngId],playerProfit[rngId]),playerProfit[rngId],playerBetValue[rngId],playerNumber[rngId],randomQueryID);
}